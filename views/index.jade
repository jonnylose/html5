extends layout

block content
  .fallback-message
    p
      | This presentation was build for latest
      b Chrome
      | or
      b Safari
      | browser.
    p
      | You are viewing simplified view, but most of the CSS 3D will not work for you, sorry.
  #impress
    #title.step
      h1
        span.short A very short introduction to
        span.css
          | CSS
          span.d3 3D
        span.transforms transforms
      span.author
        i by
        br
        span.name Bartek Szopka
        a(href='http://twitter.com/bartaz') @bartaz
        a.cognifide(href='http://cognifide.com')
          img(src='img/cognifide.png', width='150')
    #support.step(data-x='-640', data-y='0', data-rotate='30', data-scale='0.4')
      h2 Browser support
      .current
        .safari.browser
          span.prefix
            code -webkit
        .chrome.browser
          span.prefix
            code -webkit
        .android.browser
          span.prefix
            code -webkit
      .future
        .firefox.browser
          span.prefix
            code -moz
          span.version 10 
        .ie.browser
          span.prefix
            code -ms
          span.version 10 
        .opera.browser
          span.version ? 
    #transforms2d.step(data-x='-620', data-y='500', data-rotate='90', data-scale='0.5')
      h2 2D transforms
      .face.target
        | 2D
        span.axis.x
        span.axis.y
      code.snippet
        | transform:
        span.code(data-property='transform')
        span.switch.disabled translate(200px,100px)
        br
        span.indent           
        span.switch rotate(45deg)
        br
        span.indent           
        span.switch.disabled scale(2)
        br
        span.indent           
        span.switch skew(30deg)
        br
        span.indent           
        span.switch.disabled matrix(-1,0,0,1,0,0)
    #transforms3d.step(data-x='-30', data-y='540', data-rotate='190', data-scale='0.6')
      h2 3D transforms
      .face.target
        | 3D
        span.axis.x
        span.axis.y
        span.axis.z
      code.snippet
        | transform:
        br
        span.code(data-property='transform')
          span.indent    
          label.switch.slider(for='transform3d-perspective-slider')
            | perspective(
            span.val 600
            | px)
            input#transform3d-perspective-slider(type='range', min='200', max='2000', value='600')
          br
          span.indent    
          label.switch.slider(for='transform3d-translateX-slider')
            | translateX(
            span.val -100
            | px)
            input#transform3d-translateX-slider(type='range', min='-500', max='500', value='-100')
          label.switch.disabled.slider(for='transform3d-translateY-slider')
            | translateY(
            span.val 100
            | px)
            input#transform3d-translateY-slider(type='range', min='-200', max='200', value='100')
          label.switch.disabled.slider(for='transform3d-translateZ-slider')
            | translateZ(
            span.val 100
            | px)
            input#transform3d-translateZ-slider(type='range', min='-500', max='500', value='100')
          br
          span.indent    
          label.switch.slider(for='transform3d-rotateX-slider')
            | rotateX(
            span.val 60
            | deg)
            input#transform3d-rotateX-slider(type='range', min='0', max='360', value='60')
          label.switch.disabled.slider(for='transform3d-rotateY-slider')
            | rotateY(
            span.val 90
            | deg)
            input#transform3d-rotateY-slider(type='range', min='0', max='360', value='90')
          label.switch.disabled.slider(for='transform3d-rotateZ-slider')
            | rotateZ(
            span.val 30
            | deg)
            input#transform3d-rotateZ-slider(type='range', min='0', max='360', value='30')
          br
          span.indent    
          label.switch.disabled.slider(for='transform3d-rotate3d-slider')
            | rotate3d(1,1,0,
            span.val 60
            | deg)
            input#transform3d-rotate3d-slider(type='range', min='0', max='360', value='60')
          br
          span.indent    
          label.switch.disabled.slider(for='transform3d-scaleX-slider')
            | scaleX(
            span.val 0.5
            | )
            input#transform3d-scaleX-slider(type='range', min='-10', max='20', value='5', step='1', data-divider='10', data-pad='4')
          label.switch.disabled.slider(for='transform3d-scaleY-slider')
            | scaleY(
            span.val 0.5
            | )
            input#transform3d-scaleY-slider(type='range', min='-10', max='20', value='5', step='1', data-divider='10')
          label.switch.disabled.slider(for='transform3d-scaleZ-slider')
            | scaleZ(
            span.val 0.5
            | )
            input#transform3d-scaleZ-slider(type='range', min='-10', max='20', value='5', step='1', data-divider='10')
        ;
    #perspective.step(data-x='450', data-y='250', data-rotate='100', data-scale='0.25')
      h2 Perspective
      .scene.target
        .cross
        .box
          .top
          .left
          .right
          .bottom
        .box
          .top
          .left
          .right
          .bottom
      code.snippet
        .scene {
        br
        span.indent    
        span.code(data-property='perspective')
          label.slider.switch(for='scene-perspective-slider')
            span.ignore perspective:
            span.val 1000
            | px
            input#scene-perspective-slider(type='range', max='2000', min='200', value='1000')
        ;
        br
        span.indent    
        span.origin
          | perspective-origin:
          span.value 50% 50%
          | ;
        br
        }
        br
        .box {
        br
        span.indent    
        | transform:
        span.code(data-property='transform', data-selector='.box')
          label.switch.disabled.slider(for='box-perspective-slider')
            | perspective(
            span.val 600
            | px)
            input#box-perspective-slider(type='range', min='200', max='2000', value='600')
        br
        }
    #transforms3d-cube.step(data-x='670', data-y='700', data-rotate='10', data-scale='0.6')
      .cube.target
        .face front
        .face back
        .face left
        .face right
        .face top
        .face bottom
      .flip
        code.snippet
          .cube {
          br
          span.indent    
          | transform:
          span.code(data-property='transform')
            label.switch.slider(for='transform3d-cube-perspective-slider')
              | perspective(
              span.val 600
              | px)
              input#transform3d-cube-perspective-slider(type='range', min='200', max='2000', value='600')
            br
            span.indent        
            label.switch.slider(for='transform3d-cube-rotateX-slider')
              | rotateX(
              span.val 330
              | deg)
              input#transform3d-cube-rotateX-slider(type='range', min='0', max='360', value='330')
            label.switch.slider(for='transform3d-cube-rotateY-slider')
              | rotateY(
              span.val 320
              | deg)
              input#transform3d-cube-rotateY-slider(type='range', min='0', max='360', value='320')
            label.switch.slider(for='transform3d-cube-rotateZ-slider')
              | rotateZ(
              span.val 0
              | deg)
              input#transform3d-cube-rotateZ-slider(type='range', min='0', max='360', value='0')
          ;
          br
          span.indent    
          | transform-style:
          span.code(data-property='transformStyle')
            span.switch preserve-3d
          ;
          span.comment /* default: `flat` */
          br
          }
          br
          br
          .face {
          br
          span.indent    
          label.slider(for='transform3d-cube-opacity-slider')
            | opacity:
            span.code(data-property='opacity', data-selector='.face')
              span.val 0.5
              input#transform3d-cube-opacity-slider(type='range', min='1', max='10', value='5', step='1', data-divider='10')
            | ;
          br
          span.indent    
          | backface-visibility:
          span.code(data-property='backfaceVisibility', data-selector='.face')
            span.switch.disabled hidden
          ;
          span.comment /* default: `visible` */
          br
          }
        code.snippet.back
          <div class="
          span.cube-flat.switch cube
          ">
          br
          span.indent    
          <div class="face">front</div>
          span.indent  
          span.comment
            span.indent                
            | translateZ(100px)
          br
          span.indent    
          <div class="face">back</div>
          span.indent   
          span.comment rotateY(180deg) translateZ(100px)
          br
          span.indent    
          <div class="face">left</div>
          span.indent   
          span.comment rotateY(-90deg) translateZ(100px)
          br
          span.indent    
          <div class="face">right</div>
          span.indent  
          span.comment rotateY( 90deg) translateZ(100px)
          br
          span.indent    
          <div class="face">top</div>
          span.indent    
          span.comment rotateX( 90deg) translateZ(100px)
          br
          span.indent    
          <div class="face">bottom</div>
          span.indent
          span.comment rotateX(-90deg) translateZ(100px)
          br
          </div>
    #remember.step(data-x='750', data-y='70', data-rotate='30', data-scale='0.4')
      h2 Remember
      h3
        | It is
        b not
        | a
        b 3D engine
      ul
        li
          | there is
          b no single coordinate system
        li
          | there is
          b no camera, light, etc.
        li
          | complex scenes are
          b hard to maintain
        li
          | there are
          b rendering order
          | issues
        li
          b hardware accelerated
          | layers are not always good
    #demos.step(data-x='950', data-y='300', data-rotate='-60', data-scale='0.2')
      h2 demos
      h3 ...but, you can build interesting stuff
      p
        a(href='http://css-vfx.googlecode.com/svn/trunk/snowstack/snowstack.html') SnowStack Gallery
        | ,
        a(href='http://www.apple.com/html5/showcase/transitions/') Apple CSS3 Transitions Showcase
        | ,
        a(href='http://www.paulrhayes.com/experiments/sphere/') 3D Sphere
        | ,
        a(href='http://www.keithclark.co.uk/labs/3dcss/demo/') CSS 3D FPS Concept
        | ,
        a(href='http://cubiq.org/building-a-pure-css-3d-city') Pure CSS 3D City
        | ,
        a(href='http://www.google.com/search?q=CSS+3d+demos') and many more...
    #learn.step(data-x='1050', data-y='360', data-rotate='-60', data-scale='0.2')
      h3 wanna learn more?
      p
        a(href='http://desandro.github.com/3dtransforms/docs/introduction.html') Intro to CSS 3D
        | ,
        a(href='http://www.eleqtriq.com/2010/05/understanding-css-3d-transforms/') Understanding CSS 3D
        | ,
        a(href='http://coding.smashingmagazine.com/2012/01/06/adventures-in-the-third-dimension-css-3-d-transforms/') Adventures in 3rd dimension
        | ,
        a(href='http://developer.apple.com/library/safari/#documentation/InternetWeb/Conceptual/SafariVisualEffectsProgGuide/Using2Dand3DTransforms/Using2Dand3DTransforms.html#//apple_ref/doc/uid/TP40008032-CH15-SW16') Safari Guide to CSS transforms
        | ,
        a(href='http://www.w3.org/TR/css3-3d-transforms/') W3C CSS 3D Transrofms Module
    #end.step(data-x='0', data-y='500', data-rotate='0', data-scale='2')
      span.author
        i by
        br
        span.name Bartek Szopka
        a(href='http://twitter.com/bartaz') @bartaz
        a.cognifide(href='http://cognifide.com')
          img(src='img/cognifide.png', width='200')

